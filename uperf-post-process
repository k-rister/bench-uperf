#!/usr/bin/perl
## -*- mode: perl; indent-tabs-mode: nil; perl-indent-level: 4 -*-
## vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl

use strict;
use warnings;
use JSON::XS;
use Data::Dumper;
use Getopt::Long;
BEGIN {
    if (!(exists $ENV{'TOOLBOX_HOME'} && -d "$ENV{'TOOLBOX_HOME'}/perl")) {
    print "This script requires libraries that are provided by the toolbox project.\n";
    print "Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and\n";
    print "then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.\n";
    exit 1;
    }
}
use lib "$ENV{'TOOLBOX_HOME'}/perl";
use toolbox::json;
use toolbox::metrics;

my $test_type;
my $nthreads = 1;
my $remotehost;
my $ignore;
my $hostname;

GetOptions ("test-type=s" => \$test_type,
            "nthreads=i" => \$nthreads,
            "remotehost=s" => \$remotehost,
            "wsize=i" => \$ignore,
            "rsize=i" => \$ignore,
            "think=f" => \$ignore,
            "protocol=s" => \$ignore,
            "duration=i" => \$ignore,
            "ifname=s" => \$ignore,
            "cpu-pin=s" => \$ignore,
            "ipv=i" => \$ignore,
            );

if (! defined $test_type) {
    print "uperf-post-process(): test-type not defined, assuming this is server and exiting\n";
    exit 0;
}

my $primary_metric;
if ($test_type eq "rr" or $test_type eq "ping-pong") {
    $primary_metric = 'transactions-sec';
} elsif ($test_type eq "crr") {
    $primary_metric = 'connections-sec';
} else {
    $primary_metric = 'Gbps';
}
my $result_file = "uperf-client-result.txt";
my %desc = ('source' => 'uperf', 'class' => 'throughput');
(my $rc, my $fh) = open_read_text_file($result_file);
if ($rc == 0 and defined $fh) {
    my $ts, my $prev_ts, my $start_ts, my $bytes, my $prev_bytes, my $ops, my $prev_ops;;
    my %names = ();
    while (<$fh>) {
        if ( $test_type eq "crr") {
            if ( /^timestamp_ms:(\d+)\.\d+\s+name:Txn1\s+nr_bytes:(\d+)\s+nr_ops:(\d+)/ ) {
                $ts = $1, $bytes = $2, $ops = $3;
                if (defined $prev_ts and ((my $ts_diff = ($ts - $prev_ts) / 1000) > 0)) {
                    {
                        my %desc = ('source' => 'uperf', 'class' => 'throughput', 'type' => 'Gbps');
                        my %names = ('cmd' => 'readandwrite');
                        my %s = ('end' => int $ts,
                                'value' =>  8.0 * ($bytes - $prev_bytes) / 1000000000 / $ts_diff);
                        log_sample("0", \%desc, \%names, \%s);
                    }
                    # CPS transactions are five operations: connect, write, think, read, disconnect
                    my $cps = ($ops - $prev_ops) / $ts_diff / 5;
                    {
                        my %desc = ('source' => 'uperf', 'class' => 'throughput', 'type' => 'connections-sec');
                        my %s = ('end' => int $ts, 'value' => 0.0 + $cps);
                        log_sample("0", \%desc, \%names, \%s);
                    }
                    if ($cps > 0) {
                        my %desc = ('source' => 'uperf', 'class' => 'count', 'type' => 'round-trip-usec');
                        my %s = ('end' => int $ts, 'value' => 0.0 + $nthreads / $cps *1000000);
                        log_sample("0", \%desc, \%names, \%s);
                    }
                }
                $prev_ts = $ts;
                $prev_bytes = $bytes;
                $prev_ops = $ops;
            }
        } else {
            # Extract % stats from lines                  Time       Data     Throughput   Operations      Errors
            #                          "Difference(%)     -0.99%     52.34%       52.81%       52.34%       0.00% "

            if ( /^Difference\(%\) \s+(-?\d+\.\d+)% \s+(-?\d+\.\d+)% \s+(-?\d+\.\d+)% \s+(-?\d+\.\d+)% \s+(-?\d+\.\d+)%/   ) {
                my $Tput_val = $3;
                my %desc = ('source' => 'uperf', 'class' => 'count', 'type' => 'throughput-delta-pct');
                my %s = ('begin' => int $start_ts, 'end' => int $ts, 'value' => $Tput_val);
                log_sample("0", \%desc, \%names, \%s);
            }

            if ( /^timestamp_ms:(\d+)\.\d+\s+name:Txn2\s+nr_bytes:(\d+)\s+nr_ops:(\d+)/ ) {
                $ts = $1, $bytes = $2, $ops = $3;
                if (defined $prev_ts and ((my $ts_diff = ($ts - $prev_ts) / 1000) > 0)) {
                    {
                        my %desc = ('source' => 'uperf', 'class' => 'throughput', 'type' => 'Gbps');
                        my %names = ('cmd' => 'readandwrite');
                        my %s = ('end' => int $ts,
                                'value' =>  8.0 * ($bytes - $prev_bytes) / 1000000000 / $ts_diff);
                        log_sample("0", \%desc, \%names, \%s);
                    }
                    if ($test_type eq "rr" or $test_type eq "ping-pong" ) {
                        # RR transactions are two operations
                        my $tps = ($ops - $prev_ops) / $ts_diff / 2;
                        {
                            my %desc = ('source' => 'uperf', 'class' => 'throughput', 'type' => 'transactions-sec');
                            my %s = ('end' => int $ts, 'value' => 0.0 + $tps);
                            log_sample("0", \%desc, \%names, \%s);
                        }
                        if ($tps > 0) {
                            my %desc = ('source' => 'uperf', 'class' => 'count', 'type' => 'round-trip-usec');
                            my %s = ('end' => int $ts, 'value' => 0.0 + $nthreads / $tps *1000000);
                            log_sample("0", \%desc, \%names, \%s);
                        }
                    }
                } else {
                    $start_ts = $ts;
                }
                $prev_ts = $ts;
                $prev_bytes = $bytes;
                $prev_ops = $ops;
            }
        }
    }
    close($fh);
    my $metric_data_name = finish_samples();
    # Associate the metrics with a benchmark-period (in this case "measurement")
    my %sample;
    my @periods;
    my %period = ('name' => 'measurement');
    $sample{'rickshaw-bench-metric'}{'schema'}{'version'} = "2021.04.12";
    my @metric_files = ( $metric_data_name );
    $period{'metric-files'} = \@metric_files;
    push(@periods, \%period);
    $sample{'periods'} = \@periods;
    $sample{'benchmark'} = 'uperf';
    $sample{'primary-period'} = 'measurement';
    $sample{'primary-metric'} = $primary_metric;
    $rc = put_json_file("post-process-data.json", \%sample);
    if ($rc > 0) {
        printf "uperf-post-process(): Could not write file post-process-data.json\n";
        exit 1
    }
} else {
    printf "uperf-post-process(): open_read_text_file() failed with return code %d for file %s\n", $rc, $result_file;
    printf "Is the current directory for a uperf server (no result file)?\n";
}
